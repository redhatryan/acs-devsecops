- name: Get ACS details from ACS secret
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: roxsecrets
    namespace: "{{ pipeline_namespace }}"
  register: acs_secret

- name: Get ACS Server URL from Secret
  ansible.builtin.set_fact:
    acs_url: "{{ acs_secret.resources.0.data.rox_central_endpoint | b64decode }}"

- name: Get ACS Token Secret
  ansible.builtin.set_fact:
    acs_token: "{{ acs_secret.resources.0.data.rox_api_token | b64decode }}"

- name: Get Cosign Secret Details
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: "{{ secret_generate_name }}"
    namespace: "{{ pipeline_namespace }}"
  register: cosign_secret

- name: Get Cosign Key from secret
  ansible.builtin.set_fact:
    cosign_key: "{{ cosign_secret.resources.0.data['cosign.key'] | b64decode | trim }}"

- name: Get Cosign Password from secret
  ansible.builtin.set_fact:
    cosign_password: "{{ cosign_secret.resources.0.data['cosign.password'] | b64decode | trim }}"

- name: Get Cosign Public Key from secret
  ansible.builtin.set_fact:
    cosign_pub: "{{ cosign_secret.resources.0.data['cosign.pub'] | b64decode | trim | replace('\n', '\\n')}}"

- name: Get list of ACS Signatures
  uri:
    url: "https://{{ acs_url}}/v1/signatureintegrations"
    headers:
      Content-Type: application/json
    method: GET
    user: admin
    password: "{{ stackrox_central_admin_password }}"
    body_format: json
    force_basic_auth: true
    validate_certs: no
  register: cosign_signature_list

- name: Filter List of Integration Names
  ansible.builtin.set_fact:
    integration_names: "{{ cosign_signature_list.json.integrations | map(attribute='name') }}"
    integration_ids: "{{ cosign_signature_list.json.integrations | map(attribute='id') }}"
  when: cosign_signature_list.json.integrations | length>0

- name: Print List of Integrations
  ansible.builtin.debug:
    msg: "{{ integration_names }}"
  when: cosign_signature_list.json.integrations | length>0

- name: Set signature ID
  ansible.builtin.set_fact:
    signature_id: "{% if item.0 == 'cosign-demo' %}{{item.1}}{% else %}''{% endif %}"
  when: cosign_signature_list.json.integrations | length>0
  loop: "{{ integration_names|zip(integration_ids)|list }}"

- name: Print signature ID
  ansible.builtin.debug:
    msg: "{{ signature_id }}"
  when: cosign_signature_list.json.integrations | length>0

- name: Add Cosign Signature to ACS
  uri:
    url: "https://{{ acs_url }}/v1/signatureintegrations"
    headers:
      Content-Type: application/json    
    body: '{"id":"","name":"cosign-demo","cosign":{"publicKeys":[{"name":"cosign-demo","publicKeyPemEnc":"{{ cosign_pub }}"}]}}'
    method: POST
    user: admin
    password: "{{ stackrox_central_admin_password }}"
    body_format: json
    force_basic_auth: true
    validate_certs: no
  register: cosign_signature_response
  when: "'cosign-demo' not in integration_names|default('')"

- name: Set signature ID
  ansible.builtin.set_fact:
    signature_id: "{{ cosign_signature_response.json.id }}"
  when: cosign_signature_response.json|default("") != ""

- name: Print signature ID
  ansible.builtin.debug:
    msg: "{{ signature_id }}"
  when: cosign_signature_response.json|default("") != ""

- name: Try Replace Hidden Characters in Signature ID
  ansible.builtin.set_fact:
    signature_id: "{{ signature_id | regex_replace('io\\.\\*+\\.([\\w\\.-]*)$','io.stackrox.\\1') }}"
  ignore_errors: true

- name: Print signature ID
  ansible.builtin.debug:
    msg: "{{ signature_id }}"

- name: Replace SignatureId in our policy file'
  ansible.builtin.replace:
    path: "{{ role_path }}/files/policies/signed-image-policy.json"
    regexp: 'io\.[\*\w]*\.[\w\.-]*'
    replace: "{{ signature_id }}"

- name: Apply/update policies
  uri:
    url: "https://{{ acs_url }}/v1/policies/import"
    body: "{{ lookup('file', item ) }}"
    method: POST
    user: admin
    password: "{{ stackrox_central_admin_password }}"
    body_format: json
    force_basic_auth: true
    validate_certs: no
  with_fileglob:
    - "files/policies/*.json"

- name: Check if Quay Secret Exists
  k8s_info:
      kind: Secret
      name: "{{ quay_secret_name }}"
      namespace: "{{ pipeline_namespace }}"
  register: secret_check_status

- name: extract quay hostname
  shell: |
    oc get route {{ quay_registry_name }}-quay -o jsonpath='{.spec.host}' -n {{ quay_project_name }}
  register: quay_hostname_result
  delay: 5
  retries: 10
  until:
    - quay_hostname_result.stdout != ""

- name: Set Quay hostname
  ansible.builtin.set_fact:
    quay_route: "{{ quay_hostname_result.stdout }}"


# - name: Add our Quay Registry as an Insecure Registry
#   uri:
#     url: "https://{{ acs_url }}/v1/imageintegrations"
#     headers:
#       Content-Type: application/json    
#     body: '{"id":"","name":"quay-demo-registry","categories":["REGISTRY","SCANNER"],"quay":{"endpoint":"{{ quay_route}}","oauthToken":"wewewewee","insecure":true},"autogenerated":false,"clusterId":"","clusters":[],"skipTestIntegration":true,"type":"quay"}'
#     method: POST
#     user: admin
#     password: "{{ stackrox_central_admin_password }}"
#     body_format: json
#     force_basic_auth: true
#     validate_certs: no
#   register: cosign_signature_response
#   when: "'cosign-demo' not in integration_names|default('')"