- name: Check if Quay Secret Exists
  k8s_info:
      kind: Secret
      name: "{{ quay_secret_name }}"
      namespace: "{{ pipeline_namespace }}"
  register: secret_check_status

- name: extract quay hostname
  shell: |
    oc get route {{ quay_registry_name }}-quay -o jsonpath='{.spec.host}' -n {{ quay_project_name }}
  register: quay_hostname_result
  delay: 5
  retries: 10
  until:
    - quay_hostname_result.stdout != ""

- name: Set Quay hostname
  ansible.builtin.set_fact:
    quay_route: "{{ quay_hostname_result.stdout }}"

- name: Link Quay Secret to Pipeline ServiceAccount for Pipeline Namespace
  shell: | 
    oc secrets link pipeline "{{ quay_secret_name }}" --for=pull,mount -n {{ pipeline_namespace }}

- name: Link Quay Secret to default accounts for namespaces that should pull from quay
  shell: | 
    oc secrets link default "{{ quay_secret_name }}" --for=pull,mount -n {{ item }}
  loop: "{{ secret_required_namespaces }}"

- name: Create Quay Signing Task
  k8s:
    state: present
    definition: "{{ lookup('template', item ) | from_yaml }}"
  loop:
  - ./templates/cosign-task.yaml.j2

# Check Gogs
- name: Get gogs route
  kubernetes.core.k8s_info:
    kind: Route
    api_version: route.openshift.io/v1
    namespace: cicd
    name: gogs
  register: r_gogs_route
  retries: 10
  delay: 20
  until:
    - r_gogs_route.resources[0].spec.host is defined

- name: Debug gogs route
  debug:
    msg: "{{ r_gogs_route.resources[0].spec.host }}"

- name: Create OpenShift Objects for Openshift Pipelines Templates
  k8s:
    state: present
    definition: "{{ lookup('template', item ) | from_yaml }}"
  loop:
  - ./templates/pipeline-build-dev.yaml.j2
  - ./templates/pipeline-build-stage.yaml.j2
#  - ./templates/pipeline-build-pvc.yaml.j2

- name: Patch Openshift Image Config - Message
  ansible.builtin.debug:
    msg: "As we did not generate a cert, we need to add our quay registry as an insecure registry in Openshift"

- name: Patch Openshift Image Config
  ansible.builtin.shell: |
    oc patch image.config.openshift.io cluster --type=merge -p '{"spec":{"registrySources":{"insecureRegistries":["{{ quay_route }}"]}}}'
  register: insecure_patch  

- name: Pause for 4 minutes to wait for MCP to recieve changes
  ansible.builtin.pause:
    minutes: 4
  when: "'no change' not in insecure_patch.stdout"

# - name: Waiting Until Openshift Cluster is Ready from Patch
#   ansible.builtin.shell: |
#     oc get mcp -o json | jq '.items[] | select (.status.machineCount==.status.updatedMachineCount)'
#   register: mcp_result
#   delay: 10
#   retries: 15
#   until:
#     - mcp_result.stdout != ""
#   when: "'no change' not in insecure_patch.stdout"